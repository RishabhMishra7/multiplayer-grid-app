{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CooldownTimer from \"./components/CooldownTimer\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState(Array(10).fill(null).map(() => Array(10).fill({\n    value: \"\",\n    playerId: null\n  })));\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    console.log(\"ðŸ§  App mounted, connecting socket...\");\n    socketService.connect();\n\n    // âœ… Receive grid updates from other players\n    socketService.on(\"gridUpdate\", newGrid => {\n      console.log(\"ðŸ“© Grid update received:\", newGrid);\n      setGrid(newGrid);\n      setHistory(prev => [...prev, {\n        timestamp: Date.now(),\n        updates: newGrid\n      }]);\n    });\n    return () => {\n      console.log(\"ðŸ§¹ App unmounted, disconnecting socket...\");\n      socketService.disconnect();\n    };\n  }, []);\n  const handleCellClick = (row, col) => {\n    setSelectedCell({\n      row,\n      col\n    });\n    setIsModalOpen(true);\n  };\n  const handleSubmitCharacter = character => {\n    if (!selectedCell) return;\n    const {\n      row,\n      col\n    } = selectedCell;\n    const updatedGrid = grid.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value: character,\n      playerId: socketService.getSocketId()\n    } : cell));\n\n    // âœ… Update local grid\n    setGrid(updatedGrid);\n\n    // âœ… Send update to server for others\n    socketService.emit(\"gridUpdate\", updatedGrid);\n\n    // âœ… Record in history\n    setHistory(prev => [...prev, {\n      timestamp: Date.now(),\n      updates: updatedGrid\n    }]);\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Multiplayer Grid App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      onCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CooldownTimer, {\n      endTime: Date.now() + 5000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(CharacterModal, {\n      onSubmit: handleSubmitCharacter,\n      onClose: handleCloseModal,\n      selectedCell: selectedCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HistorySlider, {\n      history: history,\n      onTimeChange: index => {\n        const entry = history[index];\n        if (entry !== null && entry !== void 0 && entry.updates) {\n          setGrid(entry.updates);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Z9peiFQrqP9RkjMRTV4MxE+9EBU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","socketService","PlayerCounter","Grid","CooldownTimer","CharacterModal","HistorySlider","jsxDEV","_jsxDEV","App","_s","grid","setGrid","Array","fill","map","value","playerId","selectedCell","setSelectedCell","isModalOpen","setIsModalOpen","history","setHistory","console","log","connect","on","newGrid","prev","timestamp","Date","now","updates","disconnect","handleCellClick","row","col","handleSubmitCharacter","character","updatedGrid","r","rowIndex","cell","colIndex","getSocketId","emit","handleCloseModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","endTime","onSubmit","onClose","onTimeChange","index","entry","_c","$RefreshReg$"],"sources":["/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CooldownTimer from \"./components/CooldownTimer\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\nimport { HistoryEntry } from \"./types\";\n\ninterface Cell {\n  value: string;\n  playerId: string | null;\n}\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState<Cell[][]>(\n    Array(10)\n      .fill(null)\n      .map(() =>\n        Array(10).fill({\n          value: \"\",\n          playerId: null,\n        })\n      )\n  );\n\n  const [selectedCell, setSelectedCell] = useState<{\n    row: number;\n    col: number;\n  } | null>(null);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [history, setHistory] = useState<HistoryEntry[]>([]);\n\n  useEffect(() => {\n    console.log(\"ðŸ§  App mounted, connecting socket...\");\n    socketService.connect();\n\n    // âœ… Receive grid updates from other players\n    socketService.on(\"gridUpdate\", (newGrid: Cell[][]) => {\n      console.log(\"ðŸ“© Grid update received:\", newGrid);\n      setGrid(newGrid);\n      setHistory((prev) => [\n        ...prev,\n        {\n          timestamp: Date.now(),\n          updates: newGrid,\n        },\n      ]);\n    });\n\n    return () => {\n      console.log(\"ðŸ§¹ App unmounted, disconnecting socket...\");\n      socketService.disconnect();\n    };\n  }, []);\n\n  const handleCellClick = (row: number, col: number) => {\n    setSelectedCell({ row, col });\n    setIsModalOpen(true);\n  };\n\n  const handleSubmitCharacter = (character: string) => {\n    if (!selectedCell) return;\n\n    const { row, col } = selectedCell;\n\n    const updatedGrid = grid.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? { ...cell, value: character, playerId: socketService.getSocketId() }\n          : cell\n      )\n    );\n\n    // âœ… Update local grid\n    setGrid(updatedGrid);\n\n    // âœ… Send update to server for others\n    socketService.emit(\"gridUpdate\", updatedGrid);\n\n    // âœ… Record in history\n    setHistory((prev) => [\n      ...prev,\n      { timestamp: Date.now(), updates: updatedGrid },\n    ]);\n\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Multiplayer Grid App</h1>\n\n      <PlayerCounter />\n\n      <Grid grid={grid} onCellClick={handleCellClick} />\n\n      <CooldownTimer endTime={Date.now() + 5000} />\n\n      {isModalOpen && (\n        <CharacterModal\n          onSubmit={handleSubmitCharacter}\n          onClose={handleCloseModal}\n          selectedCell={selectedCell}\n        />\n      )}\n\n      {/* ðŸ•’ History */}\n      <HistorySlider\n        history={history}\n        onTimeChange={(index) => {\n          const entry = history[index];\n          if (entry?.updates) {\n            setGrid(entry.updates);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}