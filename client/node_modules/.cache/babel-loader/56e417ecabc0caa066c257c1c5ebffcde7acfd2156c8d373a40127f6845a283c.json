{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CooldownTimer from \"./components/CooldownTimer\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState(Array(10).fill(null).map(() => Array(10).fill({\n    value: \"\",\n    playerId: null\n  })));\n  const [history, setHistory] = useState([]);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  /** ‚úÖ Connect socket once on mount */\n  useEffect(() => {\n    console.log(\"üß† App mounted, connecting socket...\");\n    socketService.connect();\n\n    /** üîπ Listen for initial grid */\n    socketService.on(\"initialGrid\", serverGrid => {\n      console.log(\"üì¶ Received initial grid:\", serverGrid);\n      setGrid(serverGrid);\n    });\n\n    /** üîπ Listen for grid updates from others */\n    socketService.on(\"gridUpdated\", newGrid => {\n      console.log(\"‚ôªÔ∏è Grid updated from server\");\n      setGrid(newGrid);\n      setHistory(prev => [...prev, newGrid]);\n    });\n    return () => {\n      console.log(\"üßπ App unmounted, disconnecting socket...\");\n      socketService.off(\"initialGrid\");\n      socketService.off(\"gridUpdated\");\n      socketService.disconnect();\n    };\n  }, []);\n\n  /** üü© Open modal on cell click */\n  const handleCellClick = (row, col) => {\n    setSelectedCell({\n      row,\n      col\n    });\n    setIsModalOpen(true);\n  };\n\n  /** ‚úèÔ∏è Handle character submission */\n  const handleSubmitCharacter = character => {\n    if (!selectedCell) return;\n    const {\n      row,\n      col\n    } = selectedCell;\n\n    // Locally update optimistically\n    const updatedGrid = grid.map((r, rowIndex) => r.map((cell, colIndex) => {\n      var _socketService$socket;\n      return rowIndex === row && colIndex === col ? {\n        ...cell,\n        value: character,\n        playerId: ((_socketService$socket = socketService.socket) === null || _socketService$socket === void 0 ? void 0 : _socketService$socket.id) || null\n      } : cell;\n    }));\n    setGrid(updatedGrid);\n    setIsModalOpen(false);\n    setSelectedCell(null);\n\n    // üîπ Emit update to server\n    socketService.emit(\"updateCell\", {\n      row,\n      col,\n      value: character\n    });\n  };\n\n  /** üîí Close modal */\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-2\",\n      children: \"Multiplayer Grid App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      onCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CooldownTimer, {\n      endTime: Date.now() + 5000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(CharacterModal, {\n      onSubmit: handleSubmitCharacter,\n      onClose: handleCloseModal,\n      selectedCell: selectedCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HistorySlider, {\n      history: history,\n      onTimeChange: index => setGrid(history[index])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"djBRCkXe0IEngAMqUFLbMcAr7y0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","socketService","PlayerCounter","Grid","CooldownTimer","CharacterModal","HistorySlider","jsxDEV","_jsxDEV","App","_s","grid","setGrid","Array","fill","map","value","playerId","history","setHistory","selectedCell","setSelectedCell","isModalOpen","setIsModalOpen","console","log","connect","on","serverGrid","newGrid","prev","off","disconnect","handleCellClick","row","col","handleSubmitCharacter","character","updatedGrid","r","rowIndex","cell","colIndex","_socketService$socket","socket","id","emit","handleCloseModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","endTime","Date","now","onSubmit","onClose","onTimeChange","index","_c","$RefreshReg$"],"sources":["/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CooldownTimer from \"./components/CooldownTimer\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\n\ninterface Cell {\n  value: string;\n  playerId: string | null;\n}\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState<Cell[][]>(\n    Array(10)\n      .fill(null)\n      .map(() => Array(10).fill({ value: \"\", playerId: null }))\n  );\n  const [history, setHistory] = useState<Cell[][][]>([]);\n  const [selectedCell, setSelectedCell] = useState<{\n    row: number;\n    col: number;\n  } | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  /** ‚úÖ Connect socket once on mount */\n  useEffect(() => {\n    console.log(\"üß† App mounted, connecting socket...\");\n    socketService.connect();\n\n    /** üîπ Listen for initial grid */\n    socketService.on(\"initialGrid\", (serverGrid: Cell[][]) => {\n      console.log(\"üì¶ Received initial grid:\", serverGrid);\n      setGrid(serverGrid);\n    });\n\n    /** üîπ Listen for grid updates from others */\n    socketService.on(\"gridUpdated\", (newGrid: Cell[][]) => {\n      console.log(\"‚ôªÔ∏è Grid updated from server\");\n      setGrid(newGrid);\n      setHistory((prev) => [...prev, newGrid]);\n    });\n\n    return () => {\n      console.log(\"üßπ App unmounted, disconnecting socket...\");\n      socketService.off(\"initialGrid\");\n      socketService.off(\"gridUpdated\");\n      socketService.disconnect();\n    };\n  }, []);\n\n  /** üü© Open modal on cell click */\n  const handleCellClick = (row: number, col: number) => {\n    setSelectedCell({ row, col });\n    setIsModalOpen(true);\n  };\n\n  /** ‚úèÔ∏è Handle character submission */\n  const handleSubmitCharacter = (character: string) => {\n    if (!selectedCell) return;\n    const { row, col } = selectedCell;\n\n    // Locally update optimistically\n    const updatedGrid = grid.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? {\n              ...cell,\n              value: character,\n              playerId: socketService.socket?.id || null,\n            }\n          : cell\n      )\n    );\n    setGrid(updatedGrid);\n    setIsModalOpen(false);\n    setSelectedCell(null);\n\n    // üîπ Emit update to server\n    socketService.emit(\"updateCell\", { row, col, value: character });\n  };\n\n  /** üîí Close modal */\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n\n  return (\n    <div className=\"App text-center\">\n      <h1 className=\"text-2xl font-bold mb-2\">Multiplayer Grid App</h1>\n\n      {/* üü¢ Live player count */}\n      <PlayerCounter />\n\n      {/* üß± Shared grid */}\n      <Grid grid={grid} onCellClick={handleCellClick} />\n\n      {/* ‚è≥ Cooldown (dummy for now) */}\n      <CooldownTimer endTime={Date.now() + 5000} />\n\n      {/* üïπÔ∏è Character modal */}\n      {isModalOpen && (\n        <CharacterModal\n          onSubmit={handleSubmitCharacter}\n          onClose={handleCloseModal}\n          selectedCell={selectedCell}\n        />\n      )}\n\n      {/* üïí History */}\n      <HistorySlider\n        history={history}\n        onTimeChange={(index) => setGrid(history[index])}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}