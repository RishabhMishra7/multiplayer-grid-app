{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState(Array(10).fill(null).map(() => Array(10).fill({\n    value: \"\",\n    playerId: null\n  })));\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [history, setHistory] = useState([]);\n  const [isRestricted, setIsRestricted] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n\n  // ✅ Socket connection & listeners\n  useEffect(() => {\n    socketService.connect();\n    socketService.on(\"initialGrid\", serverGrid => {\n      console.log(\"📦 Received initial grid\");\n      setGrid(serverGrid);\n    });\n    socketService.on(\"gridUpdated\", newGrid => {\n      console.log(\"📡 Grid updated:\", newGrid);\n      setGrid(newGrid);\n      const updates = [];\n      newGrid.forEach((row, rIdx) => row.forEach((cell, cIdx) => {\n        if (cell.value) {\n          updates.push({\n            row: rIdx,\n            col: cIdx,\n            value: cell.value,\n            playerId: cell.playerId || \"\"\n          });\n        }\n      }));\n      setHistory(prev => [...prev, {\n        timestamp: Date.now(),\n        updates,\n        gridSnapshot: newGrid\n      }]);\n    });\n    return () => {\n      socketService.off(\"gridUpdated\");\n      socketService.off(\"initialGrid\");\n      socketService.disconnect();\n    };\n  }, []);\n\n  // 🕒 Cooldown timer effect\n  useEffect(() => {\n    let timer;\n    if (isRestricted && remainingTime > 0) {\n      timer = setInterval(() => {\n        setRemainingTime(prev => {\n          if (prev <= 1) {\n            clearInterval(timer);\n            setIsRestricted(false);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [isRestricted, remainingTime]);\n\n  // 🟩 Handle cell click\n  const handleCellClick = (row, col) => {\n    if (isRestricted) {\n      alert(`Please wait ${remainingTime}s before updating again.`);\n      return;\n    }\n    setSelectedCell({\n      row,\n      col\n    });\n    setIsModalOpen(true);\n  };\n\n  // 🟦 Handle character submit\n  const handleSubmitCharacter = character => {\n    if (!selectedCell) return;\n    const {\n      row,\n      col\n    } = selectedCell;\n    socketService.emit(\"updateCell\", {\n      row,\n      col,\n      value: character\n    });\n\n    // Start 1-minute cooldown (60 seconds)\n    setIsRestricted(true);\n    setRemainingTime(60);\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Multiplayer Grid App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      onCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(CharacterModal, {\n      onSubmit: handleSubmitCharacter,\n      onClose: handleCloseModal,\n      selectedCell: selectedCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), isRestricted && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"10px\"\n      },\n      children: [\"You can update again in \", remainingTime, \"s \\u23F3\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HistorySlider, {\n      history: history,\n      onTimeChange: index => {\n        const entry = history[index];\n        if (entry !== null && entry !== void 0 && entry.gridSnapshot) {\n          setGrid(entry.gridSnapshot);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hXonapCa0deXrtHApO1jHuYuXPw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","socketService","PlayerCounter","Grid","CharacterModal","HistorySlider","jsxDEV","_jsxDEV","App","_s","grid","setGrid","Array","fill","map","value","playerId","selectedCell","setSelectedCell","isModalOpen","setIsModalOpen","history","setHistory","isRestricted","setIsRestricted","remainingTime","setRemainingTime","connect","on","serverGrid","console","log","newGrid","updates","forEach","row","rIdx","cell","cIdx","push","col","prev","timestamp","Date","now","gridSnapshot","off","disconnect","timer","setInterval","clearInterval","handleCellClick","alert","handleSubmitCharacter","character","emit","handleCloseModal","className","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","onSubmit","onClose","color","onTimeChange","index","entry","_c","$RefreshReg$"],"sources":["/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\nimport { Cell, HistoryEntry, GridUpdate } from \"./types\";\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState<Cell[][]>(\n    Array(10)\n      .fill(null)\n      .map(() => Array(10).fill({ value: \"\", playerId: null }))\n  );\n\n  const [selectedCell, setSelectedCell] = useState<{\n    row: number;\n    col: number;\n  } | null>(null);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [history, setHistory] = useState<HistoryEntry[]>([]);\n  const [isRestricted, setIsRestricted] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n\n  // ✅ Socket connection & listeners\n  useEffect(() => {\n    socketService.connect();\n\n    socketService.on(\"initialGrid\", (serverGrid: Cell[][]) => {\n      console.log(\"📦 Received initial grid\");\n      setGrid(serverGrid);\n    });\n\n    socketService.on(\"gridUpdated\", (newGrid: Cell[][]) => {\n      console.log(\"📡 Grid updated:\", newGrid);\n      setGrid(newGrid);\n\n      const updates: GridUpdate[] = [];\n      newGrid.forEach((row, rIdx) =>\n        row.forEach((cell, cIdx) => {\n          if (cell.value) {\n            updates.push({\n              row: rIdx,\n              col: cIdx,\n              value: cell.value,\n              playerId: cell.playerId || \"\",\n            });\n          }\n        })\n      );\n\n      setHistory((prev) => [\n        ...prev,\n        { timestamp: Date.now(), updates, gridSnapshot: newGrid },\n      ]);\n    });\n\n    return () => {\n      socketService.off(\"gridUpdated\");\n      socketService.off(\"initialGrid\");\n      socketService.disconnect();\n    };\n  }, []);\n\n  // 🕒 Cooldown timer effect\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (isRestricted && remainingTime > 0) {\n      timer = setInterval(() => {\n        setRemainingTime((prev) => {\n          if (prev <= 1) {\n            clearInterval(timer);\n            setIsRestricted(false);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [isRestricted, remainingTime]);\n\n  // 🟩 Handle cell click\n  const handleCellClick = (row: number, col: number) => {\n    if (isRestricted) {\n      alert(`Please wait ${remainingTime}s before updating again.`);\n      return;\n    }\n    setSelectedCell({ row, col });\n    setIsModalOpen(true);\n  };\n\n  // 🟦 Handle character submit\n  const handleSubmitCharacter = (character: string) => {\n    if (!selectedCell) return;\n    const { row, col } = selectedCell;\n\n    socketService.emit(\"updateCell\", { row, col, value: character });\n\n    // Start 1-minute cooldown (60 seconds)\n    setIsRestricted(true);\n    setRemainingTime(60);\n\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <h1>Multiplayer Grid App</h1>\n\n      <PlayerCounter />\n\n      <Grid grid={grid} onCellClick={handleCellClick} />\n\n      {isModalOpen && (\n        <CharacterModal\n          onSubmit={handleSubmitCharacter}\n          onClose={handleCloseModal}\n          selectedCell={selectedCell}\n        />\n      )}\n\n      {/* 🕒 Cooldown message */}\n      {isRestricted && (\n        <p style={{ color: \"red\", marginTop: \"10px\" }}>\n          You can update again in {remainingTime}s ⏳\n        </p>\n      )}\n\n      {/* 🧭 History */}\n      <HistorySlider\n        history={history}\n        onTimeChange={(index) => {\n          const entry = history[index];\n          if (entry?.gridSnapshot) {\n            setGrid(entry.gridSnapshot);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}