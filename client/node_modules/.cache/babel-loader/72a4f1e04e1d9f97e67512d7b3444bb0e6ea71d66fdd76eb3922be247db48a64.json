{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CooldownTimer from \"./components/CooldownTimer\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\n// 👈 using your types file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState(Array(10).fill(null).map(() => Array(10).fill({\n    value: \"\",\n    playerId: null\n  })));\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    console.log(\"🧠 Connecting to socket...\");\n    socketService.connect();\n    socketService.on(\"initialGrid\", serverGrid => {\n      console.log(\"📦 Got initial grid from server\");\n      setGrid(serverGrid);\n    });\n    socketService.on(\"gridUpdated\", newGrid => {\n      console.log(\"♻️ Grid updated from server\");\n      setGrid(newGrid);\n      setHistory(prev => [...prev, {\n        grid: newGrid,\n        updates: [],\n        timestamp: Date.now()\n      }]);\n    });\n    return () => {\n      socketService.off(\"initialGrid\");\n      socketService.off(\"gridUpdated\");\n      socketService.disconnect();\n    };\n  }, []);\n  const handleCellClick = (row, col) => {\n    setSelectedCell({\n      row,\n      col\n    });\n    setIsModalOpen(true);\n  };\n  const handleSubmitCharacter = character => {\n    if (!selectedCell) return;\n    const {\n      row,\n      col\n    } = selectedCell;\n    const updatedGrid = grid.map((r, rowIndex) => r.map((cell, colIndex) => rowIndex === row && colIndex === col ? {\n      ...cell,\n      value: character,\n      playerId: socketService.getSocketId()\n    } : cell));\n    setGrid(updatedGrid);\n    setIsModalOpen(false);\n    setSelectedCell(null);\n\n    // 🔹 Emit update to backend\n    socketService.emit(\"updateCell\", {\n      row,\n      col,\n      value: character\n    });\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-2\",\n      children: \"Multiplayer Grid App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      onCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CooldownTimer, {\n      endTime: Date.now() + 5000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(CharacterModal, {\n      onSubmit: handleSubmitCharacter,\n      onClose: handleCloseModal,\n      selectedCell: selectedCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HistorySlider, {\n      history: history,\n      onTimeChange: index => setGrid(history[index].grid)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"NHFHppJhWEKBYe2+oL289FJoa0c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","socketService","PlayerCounter","Grid","CooldownTimer","CharacterModal","HistorySlider","jsxDEV","_jsxDEV","App","_s","grid","setGrid","Array","fill","map","value","playerId","selectedCell","setSelectedCell","isModalOpen","setIsModalOpen","history","setHistory","console","log","connect","on","serverGrid","newGrid","prev","updates","timestamp","Date","now","off","disconnect","handleCellClick","row","col","handleSubmitCharacter","character","updatedGrid","r","rowIndex","cell","colIndex","getSocketId","emit","handleCloseModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","endTime","onSubmit","onClose","onTimeChange","index","_c","$RefreshReg$"],"sources":["/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CooldownTimer from \"./components/CooldownTimer\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\nimport { HistoryEntry } from \"./types\"; // 👈 using your types file\n\ninterface Cell {\n  value: string;\n  playerId: string | null;\n}\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState<Cell[][]>(\n    Array(10)\n      .fill(null)\n      .map(() => Array(10).fill({ value: \"\", playerId: null }))\n  );\n\n  const [selectedCell, setSelectedCell] = useState<{\n    row: number;\n    col: number;\n  } | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [history, setHistory] = useState<HistoryEntry[]>([]);\n\n  useEffect(() => {\n    console.log(\"🧠 Connecting to socket...\");\n    socketService.connect();\n\n    socketService.on(\"initialGrid\", (serverGrid: Cell[][]) => {\n      console.log(\"📦 Got initial grid from server\");\n      setGrid(serverGrid);\n    });\n\n    socketService.on(\"gridUpdated\", (newGrid: Cell[][]) => {\n      console.log(\"♻️ Grid updated from server\");\n      setGrid(newGrid);\n      setHistory((prev) => [\n        ...prev,\n        { grid: newGrid, updates: [], timestamp: Date.now() },\n      ]);\n    });\n\n    return () => {\n      socketService.off(\"initialGrid\");\n      socketService.off(\"gridUpdated\");\n      socketService.disconnect();\n    };\n  }, []);\n\n  const handleCellClick = (row: number, col: number) => {\n    setSelectedCell({ row, col });\n    setIsModalOpen(true);\n  };\n\n  const handleSubmitCharacter = (character: string) => {\n    if (!selectedCell) return;\n    const { row, col } = selectedCell;\n\n    const updatedGrid = grid.map((r, rowIndex) =>\n      r.map((cell, colIndex) =>\n        rowIndex === row && colIndex === col\n          ? {\n              ...cell,\n              value: character,\n              playerId: socketService.getSocketId(),\n            }\n          : cell\n      )\n    );\n\n    setGrid(updatedGrid);\n    setIsModalOpen(false);\n    setSelectedCell(null);\n\n    // 🔹 Emit update to backend\n    socketService.emit(\"updateCell\", { row, col, value: character });\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n\n  return (\n    <div className=\"App text-center\">\n      <h1 className=\"text-2xl font-bold mb-2\">Multiplayer Grid App</h1>\n      <PlayerCounter />\n      <Grid grid={grid} onCellClick={handleCellClick} />\n      <CooldownTimer endTime={Date.now() + 5000} />\n\n      {isModalOpen && (\n        <CharacterModal\n          onSubmit={handleSubmitCharacter}\n          onClose={handleCloseModal}\n          selectedCell={selectedCell}\n        />\n      )}\n\n      <HistorySlider\n        history={history}\n        onTimeChange={(index) => setGrid(history[index].grid)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}