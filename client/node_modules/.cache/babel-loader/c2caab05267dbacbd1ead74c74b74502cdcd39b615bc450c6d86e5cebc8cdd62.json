{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState(Array(10).fill(null).map(() => Array(10).fill({\n    value: \"\",\n    playerId: null\n  })));\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [history, setHistory] = useState([]);\n\n  // âœ… Connect socket and listen for updates\n  useEffect(() => {\n    socketService.connect();\n    socketService.on(\"initialGrid\", serverGrid => {\n      console.log(\"ðŸ“¦ Received initial grid\");\n      setGrid(serverGrid);\n    });\n    socketService.on(\"gridUpdated\", newGrid => {\n      console.log(\"ðŸ“¡ Grid updated:\", newGrid);\n      setGrid(newGrid);\n\n      // Record history snapshot\n      const updates = [];\n      newGrid.forEach((row, rIdx) => row.forEach((cell, cIdx) => {\n        if (cell.value) {\n          updates.push({\n            row: rIdx,\n            col: cIdx,\n            value: cell.value,\n            playerId: cell.playerId || \"\"\n          });\n        }\n      }));\n      setHistory(prev => [...prev, {\n        timestamp: Date.now(),\n        updates,\n        gridSnapshot: newGrid\n      }]);\n    });\n    return () => {\n      socketService.off(\"gridUpdated\");\n      socketService.off(\"initialGrid\");\n      socketService.disconnect();\n    };\n  }, []);\n  const handleCellClick = (row, col) => {\n    setSelectedCell({\n      row,\n      col\n    });\n    setIsModalOpen(true);\n  };\n  const handleSubmitCharacter = character => {\n    if (!selectedCell) return;\n    const {\n      row,\n      col\n    } = selectedCell;\n\n    // Emit change to server\n    socketService.emit(\"updateCell\", {\n      row,\n      col,\n      value: character\n    });\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Multiplayer Grid App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      grid: grid,\n      onCellClick: handleCellClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(CharacterModal, {\n      onSubmit: handleSubmitCharacter,\n      onClose: handleCloseModal,\n      selectedCell: selectedCell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HistorySlider, {\n      history: history,\n      onTimeChange: index => {\n        const entry = history[index];\n        if (entry !== null && entry !== void 0 && entry.gridSnapshot) {\n          setGrid(entry.gridSnapshot);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"NHFHppJhWEKBYe2+oL289FJoa0c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","socketService","PlayerCounter","Grid","CharacterModal","HistorySlider","jsxDEV","_jsxDEV","App","_s","grid","setGrid","Array","fill","map","value","playerId","selectedCell","setSelectedCell","isModalOpen","setIsModalOpen","history","setHistory","connect","on","serverGrid","console","log","newGrid","updates","forEach","row","rIdx","cell","cIdx","push","col","prev","timestamp","Date","now","gridSnapshot","off","disconnect","handleCellClick","handleSubmitCharacter","character","emit","handleCloseModal","className","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","onSubmit","onClose","onTimeChange","index","entry","_c","$RefreshReg$"],"sources":["/Users/rishabhmishra/Desktop/multiplayer-grid-app/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { socketService } from \"./services/socketService\";\nimport PlayerCounter from \"./components/PlayerCounter\";\nimport Grid from \"./components/Grid\";\nimport CharacterModal from \"./components/CharacterModal\";\nimport HistorySlider from \"./components/HistorySlider\";\nimport { Cell, HistoryEntry, GridUpdate } from \"./types\";\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState<Cell[][]>(\n    Array(10)\n      .fill(null)\n      .map(() => Array(10).fill({ value: \"\", playerId: null }))\n  );\n\n  const [selectedCell, setSelectedCell] = useState<{\n    row: number;\n    col: number;\n  } | null>(null);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [history, setHistory] = useState<HistoryEntry[]>([]);\n\n  // âœ… Connect socket and listen for updates\n  useEffect(() => {\n    socketService.connect();\n\n    socketService.on(\"initialGrid\", (serverGrid: Cell[][]) => {\n      console.log(\"ðŸ“¦ Received initial grid\");\n      setGrid(serverGrid);\n    });\n\n    socketService.on(\"gridUpdated\", (newGrid: Cell[][]) => {\n      console.log(\"ðŸ“¡ Grid updated:\", newGrid);\n      setGrid(newGrid);\n\n      // Record history snapshot\n      const updates: GridUpdate[] = [];\n      newGrid.forEach((row, rIdx) =>\n        row.forEach((cell, cIdx) => {\n          if (cell.value) {\n            updates.push({\n              row: rIdx,\n              col: cIdx,\n              value: cell.value,\n              playerId: cell.playerId || \"\",\n            });\n          }\n        })\n      );\n\n      setHistory((prev) => [\n        ...prev,\n        { timestamp: Date.now(), updates, gridSnapshot: newGrid },\n      ]);\n    });\n\n    return () => {\n      socketService.off(\"gridUpdated\");\n      socketService.off(\"initialGrid\");\n      socketService.disconnect();\n    };\n  }, []);\n\n  const handleCellClick = (row: number, col: number) => {\n    setSelectedCell({ row, col });\n    setIsModalOpen(true);\n  };\n\n  const handleSubmitCharacter = (character: string) => {\n    if (!selectedCell) return;\n    const { row, col } = selectedCell;\n\n    // Emit change to server\n    socketService.emit(\"updateCell\", { row, col, value: character });\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedCell(null);\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <h1>Multiplayer Grid App</h1>\n\n      <PlayerCounter />\n\n      <Grid grid={grid} onCellClick={handleCellClick} />\n\n      {isModalOpen && (\n        <CharacterModal\n          onSubmit={handleSubmitCharacter}\n          onClose={handleCloseModal}\n          selectedCell={selectedCell}\n        />\n      )}\n\n      {/* ðŸ•’ History */}\n      <HistorySlider\n        history={history}\n        onTimeChange={(index) => {\n          const entry = history[index];\n          if (entry?.gridSnapshot) {\n            setGrid(entry.gridSnapshot);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}